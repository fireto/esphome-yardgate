# Deployed on PRODINo ESP32EX board
# https://kmpelectronics.eu/shop/prodino-esp32ex/
# board schematics: https://kmpelectronics.eu/wp-content/uploads/2019/12/ProDINoESP32-ETHv02-Schematic.pdf
# flashing example: https://kmpelectronics.eu/tutorials-examples/prodino-esp32-versions-tutorial/

# // Expander CS pin.
# MCP23S08CSPin 32  // IO32

# // MCP23S08 Relay pins
# REL1PIN 7 - Bus 21 - Start button
# REL2PIN 6
# REL3PIN 5
# REL4PIN 4

# //MCP23S08 Input pins
# IN1PIN 3 - Bus 24 - IR curtain
# IN2PIN 2 - Bus 21 - Start button
# IN3PIN 1 - Bus 25 - EndStop Open
# IN4PIN 0 - Bus 26 - EndStop Closed


# // Status RGB LED.
# StatusLedPixelCount 1
# StatusLedPin 0
# StatusLedPixelNumber 0
# NeoPixelBus<NeoGrbFeature, NeoEsp32BitBang800KbpsMethod> _statusLed(StatusLedPixelCount, StatusLedPin);

# // RS485 pins. Serial1.
# RS485Pin      2   // IO12
# RS485RxPin    4   // IO4
# RS485TxPin    16  // IO16
# RS485Transmit HIGH
# RS485Receive  LOW
# HardwareSerial RS485Serial(1);

### Yardgate controller main
substitutions:
  devicename: yardgate
  upperDevicename: Yard gate Controller

esphome:
  name: $devicename
  platform: ESP32
  board: esp32dev

# Include common configurations. comment out ones not required.
packages:
  wifi: !include common/wifi.yml
  # ethernet: !include common/ethernet.yml
  # api: !include common/api.yml
  ota: !include common/ota.yml
  mqtt: !include common/mqtt.yml
  logger: !include common/logger.yml
  time: !include common/time.yml
  web_server: !include common/webserver.yml

# configure SPI bus pins 
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

# enable MCP23S08 parallel I/O expansion board https://esphome.io/components/mcp23sxx
mcp23s08:
  - id: 'mcp23s08_hub'
    cs_pin: 32
    deviceaddress: 0

# Individual outputs
switch:
  - platform: restart
    name: $upperDevicename Restart

  - platform: gpio
    pin: 
      mcp23xxx: mcp23s08_hub 
      number: 7
      inverted: false
    id: yardgaterelay
    name: "YardGate Remote"
    icon: "mdi:gate"
    restore_mode: ALWAYS_OFF
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: yardgaterelay

# Individual inputs
binary_sensor:
  # detect IR fence sensor active
  - platform: gpio
    name: yardGateMotion
    id: yardgatemotion
    pin:
      mcp23xxx: mcp23s08_hub
      number: 3
      inverted: true
    filters:
      - delayed_on_off: 500ms

  # detect gate opened by external system (remote "clics")
  - platform: gpio
    pin:
      mcp23xxx: mcp23s08_hub
      number: 2
      inverted: false
    name: "YardGate click"
    id: yardgateClick

  # detect endstop switch for gate closed  
  - platform: gpio
    name: yardGateEndSwitchClosed
    id: yardgateEndswitchclosed
    pin:
      mcp23xxx: mcp23s08_hub
      number: 1
      inverted: true
    filters:
      - delayed_on_off: 500ms

  # detect endstop switch for gate open    
  - platform: gpio
    name: yardGateEndSwitchOpen
    id: yardgateEndswitchopen
    pin:
      mcp23xxx: mcp23s08_hub
      number: 0
      inverted: true
    filters:
      - delayed_on_off: 500ms

sensor:
  # log wifi signal every 60 seconds
  - platform: wifi_signal
    name: $upperDevicename wifi signal
    update_interval: 60s

  # calculate uptime in human readable format
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
      
text_sensor:
  - platform: template
    name: $upperDevicename Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

# esphome feedback cover documentation: https://esphome.io/components/cover/feedback.html    
cover:
  - platform: feedback
    name: YardGate
    device_class: gate
    has_built_in_endstop: true
    
    open_action:
      - switch.turn_on: yardgaterelay
    open_endstop: yardgateEndswitchopen
    open_duration: 45sec

    stop_action:
      - switch.turn_on: yardgaterelay
    
    close_action:
      - switch.turn_on: yardgaterelay
    close_endstop: yardgateEndswitchclosed
    close_duration: 45sec
    max_duration: 2min
